!function(){"use strict";class e{constructor(e,t,s,r,i){this._name=e.name,this._link=e.link,this._id=e._id,this._cardSelector=t,this._handeImageClick=s,this._handleDeleteClick=r,this._handleLikeClick=i,this.isLiked=e.isLiked}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{this._handleLikeClick(this)})),this._cardImageElement.addEventListener("click",(()=>{this._handeImageClick(this._name,this._link)})),this._deleteButton.addEventListener("click",(()=>{this._handleDeleteClick(this)}))}checkLikeState(){this.isLiked?this._likeButton.classList.add("card__like-button_active"):this._likeButton.classList.remove("card__like-button_active")}toggleLike(){this._likeButton.classList.toggle("card__like-button_active")}removeCard(){this._cardElement.remove(),this._cardElement=null}_getTemplate(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._cardElement}generateCard(){this._cardElement=this._getTemplate(),this._cardImageElement=this._cardElement.querySelector(".card__image"),this._likeButton=this._cardElement.querySelector(".card__like-button"),this._deleteButton=this._cardElement.querySelector(".card__trash-button");const e=this._cardElement.querySelector(".card__title");return this._cardImageElement.src=this._link,this._cardImageElement.alt=this._name,e.textContent=this._name,this._setEventListeners(),this.checkLikeState(),this._cardElement}}class t{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formEl=t,this._submitButton=this._formEl.querySelector(this._submitButtonSelector),this._inputElements=[...this._formEl.querySelectorAll(this._inputSelector)]}showErrorMessage(e){const t=this._formEl.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}hideErrorMessage(e){const t=this._formEl.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}checkInputValidity(e){e.validity.valid?this.hideErrorMessage(e):this.showErrorMessage(e)}toggleButtonState(){this._inputElements.every((e=>e.validity.valid))?(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1):this.disableSubmitButton()}disableSubmitButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0,"modal-form-trash"===this._formEl.id&&this.toggleButtonState()}setEventListeners(){this._inputElements.forEach((e=>{e.addEventListener("input",(()=>{this.checkInputValidity(e),this.toggleButtonState()}))})),this.toggleButtonState()}enableValidation(){this._formEl.addEventListener("submit",(e=>{e.preventDefault(),console.log("Form submitted."),this.disableSubmitButton()})),this.setEventListeners()}}class s{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}class r{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._popupElement.querySelector(".modal__close-button").addEventListener("click",(()=>this.close())),this._popupElement.addEventListener("mousedown",(e=>{e.target===this._popupElement&&this.close()}))}}class i extends r{constructor(e,t){super({popupSelector:e}),this._handleFormSubmit=t,this._formPopup=this._popupElement.querySelector(".modal__form"),this._inputList=this._formPopup.querySelectorAll(".modal__input"),this._submitButton=this._popupElement.querySelector(".modal__button"),this._defaultButtonText=this._submitButton.textContent}_getInputValues(){return this._formValues={},this._inputList.forEach((e=>{this._formValues[e.name]=e.value})),this._formValues}renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitButton.textContent=e?t:this._defaultButtonText}setEventListeners(){this._formPopup.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())})),super.setEventListeners()}setInputValues(e){this._inputList.forEach((t=>{t.value=e[t.name]}))}formReset(){this._formPopup.reset()}getForm(){return this._formPopup}}const n={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},o=document.querySelector("#modal-edit"),a=document.querySelector(".profile__add-button"),l=document.querySelector(".profile__avatar-button"),c=document.querySelector(".profile__edit-button"),d=o.querySelector("#name"),u=o.querySelector("#subtitle"),h=new class{constructor(e,t){this._baseUrl=e,this._headers=t}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}_request(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const s={headers:this._headers,...t},r=`${this._baseUrl}${e}`;return fetch(r,s).then(this._checkResponse)}getUserInfo(){return this._request("/users/me")}editProfile(e){return this._request("/users/me",{method:"PATCH",body:JSON.stringify({name:e.name,about:e.subtitle})})}getInitialCards(){return this._request("/cards")}createCardAdd(e){return this._request("/cards",{method:"POST",body:JSON.stringify({name:e.title,link:e.url})})}deleteCard(e){return this._request(`/cards/${e}`,{method:"DELETE"})}likeCard(e){return this._request(`/cards/${e}/likes`,{method:"PUT"})}dislikeCard(e){return this._request(`/cards/${e}/likes`,{method:"DELETE"})}editProfileAvatar(e){return this._request("/users/me/avatar",{method:"PATCH",body:JSON.stringify({avatar:e.url})})}getAppInfo(){return Promise.all([this.getInitialCards(),this.getUserInfo()])}}("https://around-api.en.tripleten-services.com/v1",{authorization:"6e6ca955-c2df-4d70-a35e-af9025599fa8","Content-Type":"application/json"}),_=new class{constructor(e){let{nameSelector:t,jobSelector:s,avatarSelector:r}=e;this._nameElement=document.querySelector(t),this._jobElement=document.querySelector(s),this._avatarElement=document.querySelector(r)}getUserInfo(){return{name:this._nameElement.textContent,job:this._jobElement.textContent}}setUserInfo(e){let{name:t,job:s}=e;this._nameElement.textContent=t,this._jobElement.textContent=s}setUserAvatar(e){this._avatarElement.src=e}}({nameSelector:".profile__title",jobSelector:".profile__subtitle",avatarSelector:".profile__avatar"}),m=new i("#modal-edit",(function(e){m.renderLoading(!0),h.editProfile(e).then((e=>{_.setUserInfo({name:e.name,job:e.about}),_.setUserAvatar(e.avatar),m.close()})).catch((e=>{console.error("Error updating profile: ",e)})).finally((()=>{m.renderLoading(!1)}))}));m.setEventListeners();const p=new i("#modal-add",(function(e){p.renderLoading(!0),h.createCardAdd(e).then((e=>{L(e),p.close(),p.formReset()})).catch((e=>{console.error("Error creating card:",e)})).finally((()=>{p.renderLoading(!1)}))}));p.setEventListeners();const E=new class extends r{constructor(e){super({popupSelector:e}),this._imageElement=this._popupElement.querySelector(".modal__image-preview"),this._captionElement=this._popupElement.querySelector(".modal__title-preview")}open(e){this._imageElement.src=e.link,this._imageElement.alt=e.name,this._captionElement.textContent=e.name,super.open()}}("#modal-image");E.setEventListeners();const v=new class extends r{constructor(e){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._submitButton=this._popupElement.querySelector("#save-btn"),this._defaultButtonText=this._submitButton.textContent}setSubmitAction(e){this._handleSubmitCallback=e}renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Deleting...";this._submitButton.textContent=e?t:this._defaultButtonText}setEventListeners(){this._popupElement.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmitCallback()})),super.setEventListeners()}}("#modal-trash");v.setEventListeners();const g=new i("#modal-update",(function(e){g.renderLoading(!0),h.editProfileAvatar(e).then((e=>{_.setUserAvatar(e.avatar),g.close(),g.formReset()})).catch((e=>{console.error("Error creating card:",e)})).finally((()=>{g.renderLoading(!1)}))}));function b(e){e.isLiked?h.dislikeCard(e._id).then((()=>{e.toggleLike(),e.isLiked=!e.isLiked})).catch((e=>{console.error("Error creating card:",e)})):h.likeCard(e._id).then((()=>{e.toggleLike(),e.isLiked=!e.isLiked})).catch((e=>{console.error("Error creating card:",e)}))}function f(e){v.open(),v.setSubmitAction((()=>{v.renderLoading(!0),h.deleteCard(e._id).then((()=>{e.removeCard(),v.close()})).catch((e=>{console.error("Error deleting card:",e)})).finally((()=>{v.renderLoading(!1)}))}))}let S;function L(t){const s=new e(t,"#card-template",((e,t)=>{E.open({name:e,link:t})}),f,b).generateCard();S.addItem(s)}g.setEventListeners(),c.addEventListener("click",(()=>{const e=_.getUserInfo();d.value=e.name,u.value=e.job,m.open()})),a.addEventListener("click",(()=>{p.open()})),l.addEventListener("click",(()=>{g.open()})),h.getAppInfo().then((e=>{let[t,r]=e;S=new s({items:t.reverse(),renderer:L},".cards__list"),S.renderItems(),_.setUserInfo({name:r.name,job:r.about}),_.setUserAvatar(r.avatar)})).catch((e=>{console.error("Error loading app info:",e)}));const k=document.querySelectorAll(".modal__form"),C={};k.forEach((e=>{const s=new t(n,e),r=e.getAttribute("name");C[r]=s,s.enableValidation()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Z0IsSUFBSXZLLEVBQWNDLEVBQVFDLEdBQzFDc0ssRUFBV3RLLEVBQU91SyxhQUFhLFFBQ3JDSCxFQUFlRSxHQUFZRCxFQUMzQkEsRUFBY3ZJLGtCQUFrQixHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2VfcHJvamVjdF9hcm91bmR0aGV1cy8uL3NyYy9jb21wb25lbnRzL0NhcmQuanMiLCJ3ZWJwYWNrOi8vc2VfcHJvamVjdF9hcm91bmR0aGV1cy8uL3NyYy9jb21wb25lbnRzL0Zvcm1WYWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vc2VfcHJvamVjdF9hcm91bmR0aGV1cy8uL3NyYy9jb21wb25lbnRzL3NlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vc2VfcHJvamVjdF9hcm91bmR0aGV1cy8uL3NyYy9jb21wb25lbnRzL1BvcHVwLmpzIiwid2VicGFjazovL3NlX3Byb2plY3RfYXJvdW5kdGhldXMvLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzIiwid2VicGFjazovL3NlX3Byb2plY3RfYXJvdW5kdGhldXMvLi9zcmMvdXRpbHMvQ29uc3RhbnRzLmpzIiwid2VicGFjazovL3NlX3Byb2plY3RfYXJvdW5kdGhldXMvLi9zcmMvcGFnZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc2VfcHJvamVjdF9hcm91bmR0aGV1cy8uL3NyYy9jb21wb25lbnRzL0FwaS5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL2NvbXBvbmVudHMvVXNlckluZm8uanMiLCJ3ZWJwYWNrOi8vc2VfcHJvamVjdF9hcm91bmR0aGV1cy8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzIiwid2VicGFjazovL3NlX3Byb2plY3RfYXJvdW5kdGhldXMvLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhDb25maXJtLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIENhcmQge1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgZGF0YSxcclxuICAgIGNhcmRTZWxlY3RvcixcclxuICAgIGhhbmRsZUltYWdlQ2xpY2ssXHJcbiAgICBoYW5kbGVEZWxldGVDbGljayxcclxuICAgIGhhbmRsZUxpa2VDbGlja1xyXG4gICkge1xyXG4gICAgdGhpcy5fbmFtZSA9IGRhdGEubmFtZTtcclxuICAgIHRoaXMuX2xpbmsgPSBkYXRhLmxpbms7XHJcbiAgICB0aGlzLl9pZCA9IGRhdGEuX2lkO1xyXG4gICAgdGhpcy5fY2FyZFNlbGVjdG9yID0gY2FyZFNlbGVjdG9yO1xyXG4gICAgdGhpcy5faGFuZGVJbWFnZUNsaWNrID0gaGFuZGxlSW1hZ2VDbGljaztcclxuICAgIHRoaXMuX2hhbmRsZURlbGV0ZUNsaWNrID0gaGFuZGxlRGVsZXRlQ2xpY2s7XHJcbiAgICB0aGlzLl9oYW5kbGVMaWtlQ2xpY2sgPSBoYW5kbGVMaWtlQ2xpY2s7XHJcbiAgICB0aGlzLmlzTGlrZWQgPSBkYXRhLmlzTGlrZWQ7XHJcbiAgfVxyXG5cclxuICBfc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICB0aGlzLl9saWtlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgIHRoaXMuX2hhbmRsZUxpa2VDbGljayh0aGlzKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuX2NhcmRJbWFnZUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgdGhpcy5faGFuZGVJbWFnZUNsaWNrKHRoaXMuX25hbWUsIHRoaXMuX2xpbmspO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gSGFuZGxlIGRlbGV0ZSBidXR0b24gY2xpY2tcclxuICAgIHRoaXMuX2RlbGV0ZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICB0aGlzLl9oYW5kbGVEZWxldGVDbGljayh0aGlzKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgY2hlY2tMaWtlU3RhdGUoKSB7XHJcbiAgICBpZiAodGhpcy5pc0xpa2VkKSB7XHJcbiAgICAgIHRoaXMuX2xpa2VCdXR0b24uY2xhc3NMaXN0LmFkZChcImNhcmRfX2xpa2UtYnV0dG9uX2FjdGl2ZVwiKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuX2xpa2VCdXR0b24uY2xhc3NMaXN0LnJlbW92ZShcImNhcmRfX2xpa2UtYnV0dG9uX2FjdGl2ZVwiKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHRvZ2dsZUxpa2UoKSB7XHJcbiAgICB0aGlzLl9saWtlQnV0dG9uLmNsYXNzTGlzdC50b2dnbGUoXCJjYXJkX19saWtlLWJ1dHRvbl9hY3RpdmVcIik7XHJcbiAgfVxyXG5cclxuICByZW1vdmVDYXJkKCkge1xyXG4gICAgdGhpcy5fY2FyZEVsZW1lbnQucmVtb3ZlKCk7XHJcbiAgICB0aGlzLl9jYXJkRWxlbWVudCA9IG51bGw7IC8vIEF2b2lkIG1lbW9yeSBsZWFrc1xyXG4gIH1cclxuXHJcbiAgX2dldFRlbXBsYXRlKCkge1xyXG4gICAgdGhpcy5fY2FyZEVsZW1lbnQgPSBkb2N1bWVudFxyXG4gICAgICAucXVlcnlTZWxlY3Rvcih0aGlzLl9jYXJkU2VsZWN0b3IpXHJcbiAgICAgIC5jb250ZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZFwiKVxyXG4gICAgICAuY2xvbmVOb2RlKHRydWUpO1xyXG4gICAgcmV0dXJuIHRoaXMuX2NhcmRFbGVtZW50O1xyXG4gIH1cclxuXHJcbiAgZ2VuZXJhdGVDYXJkKCkge1xyXG4gICAgdGhpcy5fY2FyZEVsZW1lbnQgPSB0aGlzLl9nZXRUZW1wbGF0ZSgpO1xyXG4gICAgdGhpcy5fY2FyZEltYWdlRWxlbWVudCA9IHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9faW1hZ2VcIik7XHJcbiAgICB0aGlzLl9saWtlQnV0dG9uID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19saWtlLWJ1dHRvblwiKTtcclxuICAgIHRoaXMuX2RlbGV0ZUJ1dHRvbiA9IHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fdHJhc2gtYnV0dG9uXCIpO1xyXG4gICAgY29uc3QgY2FyZFRpdGxlID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX190aXRsZVwiKTtcclxuXHJcbiAgICAvLyBTZXQgdGhlIGltYWdlIHNvdXJjZSBhbmQgdGl0bGVcclxuICAgIHRoaXMuX2NhcmRJbWFnZUVsZW1lbnQuc3JjID0gdGhpcy5fbGluaztcclxuICAgIHRoaXMuX2NhcmRJbWFnZUVsZW1lbnQuYWx0ID0gdGhpcy5fbmFtZTtcclxuICAgIGNhcmRUaXRsZS50ZXh0Q29udGVudCA9IHRoaXMuX25hbWU7XHJcblxyXG4gICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgIHRoaXMuY2hlY2tMaWtlU3RhdGUoKTtcclxuICAgIC8vIFJldHVybiB0aGUgcG9wdWxhdGVkIGNhcmQgZWxlbWVudFxyXG4gICAgcmV0dXJuIHRoaXMuX2NhcmRFbGVtZW50O1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBGb3JtVmFsaWRhdG9yIHtcclxuICBjb25zdHJ1Y3Rvcihjb25maWcsIGZvcm1FbCkge1xyXG4gICAgdGhpcy5faW5wdXRTZWxlY3RvciA9IGNvbmZpZy5pbnB1dFNlbGVjdG9yO1xyXG4gICAgdGhpcy5fc3VibWl0QnV0dG9uU2VsZWN0b3IgPSBjb25maWcuc3VibWl0QnV0dG9uU2VsZWN0b3I7XHJcbiAgICB0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzID0gY29uZmlnLmluYWN0aXZlQnV0dG9uQ2xhc3M7XHJcbiAgICB0aGlzLl9pbnB1dEVycm9yQ2xhc3MgPSBjb25maWcuaW5wdXRFcnJvckNsYXNzO1xyXG4gICAgdGhpcy5fZXJyb3JDbGFzcyA9IGNvbmZpZy5lcnJvckNsYXNzO1xyXG5cclxuICAgIHRoaXMuX2Zvcm1FbCA9IGZvcm1FbDtcclxuXHJcbiAgICB0aGlzLl9zdWJtaXRCdXR0b24gPSB0aGlzLl9mb3JtRWwucXVlcnlTZWxlY3Rvcih0aGlzLl9zdWJtaXRCdXR0b25TZWxlY3Rvcik7XHJcbiAgICB0aGlzLl9pbnB1dEVsZW1lbnRzID0gW1xyXG4gICAgICAuLi50aGlzLl9mb3JtRWwucXVlcnlTZWxlY3RvckFsbCh0aGlzLl9pbnB1dFNlbGVjdG9yKSxcclxuICAgIF07XHJcbiAgfVxyXG5cclxuICBzaG93RXJyb3JNZXNzYWdlKGlucHV0RWwpIHtcclxuICAgIGNvbnN0IGVycm9yRWwgPSB0aGlzLl9mb3JtRWwucXVlcnlTZWxlY3RvcihgIyR7aW5wdXRFbC5pZH0tZXJyb3JgKTtcclxuICAgIGlucHV0RWwuY2xhc3NMaXN0LmFkZCh0aGlzLl9pbnB1dEVycm9yQ2xhc3MpOyAvLyBBZGQgZXJyb3Igc3R5bGluZ1xyXG4gICAgZXJyb3JFbC50ZXh0Q29udGVudCA9IGlucHV0RWwudmFsaWRhdGlvbk1lc3NhZ2U7IC8vIERpc3BsYXkgdGhlIG1lc3NhZ2VcclxuICAgIGVycm9yRWwuY2xhc3NMaXN0LmFkZCh0aGlzLl9lcnJvckNsYXNzKTsgLy8gTWFrZSB0aGUgbWVzc2FnZSB2aXNpYmxlXHJcbiAgfVxyXG5cclxuICBoaWRlRXJyb3JNZXNzYWdlKGlucHV0RWwpIHtcclxuICAgIGNvbnN0IGVycm9yRWwgPSB0aGlzLl9mb3JtRWwucXVlcnlTZWxlY3RvcihgIyR7aW5wdXRFbC5pZH0tZXJyb3JgKTtcclxuICAgIGlucHV0RWwuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9pbnB1dEVycm9yQ2xhc3MpOyAvLyBSZW1vdmUgZXJyb3Igc3R5bGluZ1xyXG4gICAgZXJyb3JFbC50ZXh0Q29udGVudCA9IFwiXCI7IC8vIENsZWFyIHRoZSBtZXNzYWdlXHJcbiAgICBlcnJvckVsLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fZXJyb3JDbGFzcyk7IC8vIEhpZGUgdGhlIG1lc3NhZ2VcclxuICB9XHJcblxyXG4gIGNoZWNrSW5wdXRWYWxpZGl0eShpbnB1dEVsKSB7XHJcbiAgICBpZiAoIWlucHV0RWwudmFsaWRpdHkudmFsaWQpIHtcclxuICAgICAgdGhpcy5zaG93RXJyb3JNZXNzYWdlKGlucHV0RWwpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5oaWRlRXJyb3JNZXNzYWdlKGlucHV0RWwpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gdG9nZ2xlQnV0dG9uU3RhdGUoKSB7XHJcbiAgLy8gICBjb25zdCBpc0Zvcm1WYWxpZCA9IHRoaXMuX2lucHV0RWxlbWVudHMuZXZlcnkoXHJcbiAgLy8gICAgIChpbnB1dEVsKSA9PiBpbnB1dEVsLnZhbGlkaXR5LnZhbGlkICYmIGlucHV0RWwudmFsdWUgIT09IFwiXCJcclxuICAvLyAgICk7XHJcblxyXG4gIHRvZ2dsZUJ1dHRvblN0YXRlKCkge1xyXG4gICAgY29uc3QgaXNGb3JtVmFsaWQgPSB0aGlzLl9pbnB1dEVsZW1lbnRzLmV2ZXJ5KFxyXG4gICAgICAoaW5wdXRFbCkgPT4gaW5wdXRFbC52YWxpZGl0eS52YWxpZFxyXG4gICAgKTtcclxuXHJcbiAgICBpZiAoaXNGb3JtVmFsaWQpIHtcclxuICAgICAgdGhpcy5fc3VibWl0QnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5faW5hY3RpdmVCdXR0b25DbGFzcyk7XHJcbiAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5kaXNhYmxlU3VibWl0QnV0dG9uKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBkaXNhYmxlU3VibWl0QnV0dG9uKCkge1xyXG4gICAgdGhpcy5fc3VibWl0QnV0dG9uLmNsYXNzTGlzdC5hZGQodGhpcy5faW5hY3RpdmVCdXR0b25DbGFzcyk7XHJcbiAgICB0aGlzLl9zdWJtaXRCdXR0b24uZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgaWYgKHRoaXMuX2Zvcm1FbC5pZCA9PT0gXCJtb2RhbC1mb3JtLXRyYXNoXCIpIHtcclxuICAgICAgdGhpcy50b2dnbGVCdXR0b25TdGF0ZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICB0aGlzLl9pbnB1dEVsZW1lbnRzLmZvckVhY2goKGlucHV0RWwpID0+IHtcclxuICAgICAgaW5wdXRFbC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuY2hlY2tJbnB1dFZhbGlkaXR5KGlucHV0RWwpO1xyXG4gICAgICAgIHRoaXMudG9nZ2xlQnV0dG9uU3RhdGUoKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIC8vIEluaXRpYWwgY2hlY2sgdG8gdXBkYXRlIHRoZSBidXR0b24gc3RhdGUgd2hlbiB0aGUgZm9ybSBpcyBsb2FkZWRcclxuICAgIHRoaXMudG9nZ2xlQnV0dG9uU3RhdGUoKTtcclxuICB9XHJcblxyXG4gIGVuYWJsZVZhbGlkYXRpb24oKSB7XHJcbiAgICB0aGlzLl9mb3JtRWwuYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZSkgPT4ge1xyXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiRm9ybSBzdWJtaXR0ZWQuXCIpO1xyXG4gICAgICB0aGlzLmRpc2FibGVTdWJtaXRCdXR0b24oKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICB9XHJcbn1cclxuXHJcbi8vIGNvbnN0IGZvcm1FbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5tb2RhbF9fZm9ybVwiKTtcclxuLy8gY29uc3QgY29uZmlnID0ge1xyXG4vLyAgIGZvcm1TZWxlY3RvcjogXCIubW9kYWxfX2Zvcm1cIixcclxuLy8gICBpbnB1dFNlbGVjdG9yOiBcIi5tb2RhbF9faW5wdXRcIixcclxuLy8gICBzdWJtaXRCdXR0b25TZWxlY3RvcjogXCIubW9kYWxfX2J1dHRvblwiLFxyXG4vLyAgIGluYWN0aXZlQnV0dG9uQ2xhc3M6IFwibW9kYWxfX2J1dHRvbl9kaXNhYmxlZFwiLFxyXG4vLyAgIGlucHV0RXJyb3JDbGFzczogXCJtb2RhbF9faW5wdXRfdHlwZV9lcnJvclwiLFxyXG4vLyAgIGVycm9yQ2xhc3M6IFwibW9kYWxfX2Vycm9yX3Zpc2libGVcIixcclxuLy8gfTtcclxuXHJcbi8vIGZvcm1FbGVtZW50LmZvckVhY2goKGZvcm1FbCkgPT4ge1xyXG4vLyAgIGNvbnN0IGZvcm1WYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcihjb25maWcsIGZvcm1FbCk7XHJcbi8vICAgZm9ybVZhbGlkYXRvci5lbmFibGVWYWxpZGF0aW9uKCk7XHJcbi8vIH0pO1xyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBTZWN0aW9uIHtcclxuICBjb25zdHJ1Y3Rvcih7IGl0ZW1zLCByZW5kZXJlciB9LCBjb250YWluZXJTZWxlY3Rvcikge1xyXG4gICAgdGhpcy5faXRlbXMgPSBpdGVtcztcclxuICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XHJcbiAgICB0aGlzLl9jb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNvbnRhaW5lclNlbGVjdG9yKTtcclxuICB9XHJcblxyXG4gIHJlbmRlckl0ZW1zKCkge1xyXG4gICAgdGhpcy5faXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG4gICAgICB0aGlzLl9yZW5kZXJlcihpdGVtKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgYWRkSXRlbShlbGVtZW50KSB7XHJcbiAgICB0aGlzLl9jb250YWluZXIucHJlcGVuZChlbGVtZW50KTtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKHsgcG9wdXBTZWxlY3RvciB9KSB7XHJcbiAgICB0aGlzLl9wb3B1cEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHBvcHVwU2VsZWN0b3IpO1xyXG4gICAgdGhpcy5faGFuZGxlRXNjQ2xvc2UgPSB0aGlzLl9oYW5kbGVFc2NDbG9zZS5iaW5kKHRoaXMpO1xyXG4gIH1cclxuXHJcbiAgb3BlbigpIHtcclxuICAgIHRoaXMuX3BvcHVwRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwibW9kYWxfb3BlbmVkXCIpO1xyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5faGFuZGxlRXNjQ2xvc2UpO1xyXG4gIH1cclxuXHJcbiAgY2xvc2UoKSB7XHJcbiAgICB0aGlzLl9wb3B1cEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcIm1vZGFsX29wZW5lZFwiKTtcclxuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKTtcclxuICB9XHJcblxyXG4gIF9oYW5kbGVFc2NDbG9zZShldnQpIHtcclxuICAgIGlmIChldnQua2V5ID09PSBcIkVzY2FwZVwiKSB7XHJcbiAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgY29uc3QgY2xvc2VCdXR0b24gPSB0aGlzLl9wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgXCIubW9kYWxfX2Nsb3NlLWJ1dHRvblwiXHJcbiAgICApO1xyXG5cclxuICAgIGNsb3NlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB0aGlzLmNsb3NlKCkpO1xyXG5cclxuICAgIC8vQ2xvc2Ugd2hlbiBjbGlja2luZyBvbiB0aGUgb3ZlcmxheVxyXG4gICAgdGhpcy5fcG9wdXBFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgKGV2ZW50KSA9PiB7XHJcbiAgICAgIGlmIChldmVudC50YXJnZXQgPT09IHRoaXMuX3BvcHVwRWxlbWVudCkge1xyXG4gICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBXaXRoRm9ybSBleHRlbmRzIFBvcHVwIHtcclxuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yLCBoYW5kbGVGb3JtU3VibWl0KSB7XHJcbiAgICBzdXBlcih7IHBvcHVwU2VsZWN0b3IgfSk7XHJcbiAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0ID0gaGFuZGxlRm9ybVN1Ym1pdDtcclxuICAgIHRoaXMuX2Zvcm1Qb3B1cCA9IHRoaXMuX3BvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19mb3JtXCIpO1xyXG4gICAgdGhpcy5faW5wdXRMaXN0ID0gdGhpcy5fZm9ybVBvcHVwLnF1ZXJ5U2VsZWN0b3JBbGwoXCIubW9kYWxfX2lucHV0XCIpO1xyXG4gICAgdGhpcy5fc3VibWl0QnV0dG9uID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2J1dHRvblwiKTtcclxuICAgIHRoaXMuX2RlZmF1bHRCdXR0b25UZXh0ID0gdGhpcy5fc3VibWl0QnV0dG9uLnRleHRDb250ZW50O1xyXG4gIH1cclxuXHJcbiAgX2dldElucHV0VmFsdWVzKCkge1xyXG4gICAgdGhpcy5fZm9ybVZhbHVlcyA9IHt9O1xyXG4gICAgdGhpcy5faW5wdXRMaXN0LmZvckVhY2goKGlucHV0KSA9PiB7XHJcbiAgICAgIHRoaXMuX2Zvcm1WYWx1ZXNbaW5wdXQubmFtZV0gPSBpbnB1dC52YWx1ZTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHRoaXMuX2Zvcm1WYWx1ZXM7XHJcbiAgfVxyXG4gIC8vIE1ldGhvZCB0byBzaG93IGxvYWRpbmcgc3RhdGUgb24gdGhlIGJ1dHRvblxyXG4gIHJlbmRlckxvYWRpbmcoaXNMb2FkaW5nLCBsb2FkaW5nVGV4dCA9IFwiU2F2aW5nLi4uXCIpIHtcclxuICAgIGlmIChpc0xvYWRpbmcpIHtcclxuICAgICAgdGhpcy5fc3VibWl0QnV0dG9uLnRleHRDb250ZW50ID0gbG9hZGluZ1RleHQ7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9zdWJtaXRCdXR0b24udGV4dENvbnRlbnQgPSB0aGlzLl9kZWZhdWx0QnV0dG9uVGV4dDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgdGhpcy5fZm9ybVBvcHVwLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGV2dCkgPT4ge1xyXG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgdGhpcy5faGFuZGxlRm9ybVN1Ym1pdCh0aGlzLl9nZXRJbnB1dFZhbHVlcygpKTtcclxuICAgICAgLy8gdGhpcy5jbG9zZSgpO1xyXG4gICAgfSk7XHJcbiAgICBzdXBlci5zZXRFdmVudExpc3RlbmVycygpO1xyXG4gIH1cclxuXHJcbiAgc2V0SW5wdXRWYWx1ZXMoZGF0YSkge1xyXG4gICAgdGhpcy5faW5wdXRMaXN0LmZvckVhY2goKGlucHV0KSA9PiB7XHJcbiAgICAgIGlucHV0LnZhbHVlID0gZGF0YVtpbnB1dC5uYW1lXTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZm9ybVJlc2V0KCkge1xyXG4gICAgdGhpcy5fZm9ybVBvcHVwLnJlc2V0KCk7XHJcbiAgfVxyXG5cclxuICBnZXRGb3JtKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2Zvcm1Qb3B1cDtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGNvbnN0IGluaXRpYWxDYXJkcyA9IFtcclxuICB7XHJcbiAgICBuYW1lOiBcIkxhZ28gZGkgQnJhaWVzXCIsXHJcbiAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QvbGFnby5qcGdcIixcclxuICB9LFxyXG4gIHtcclxuICAgIG5hbWU6IFwiVmFub2lzZSBOYXRpb25hbCBQYXJrXCIsXHJcbiAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QvdmFub2lzZS5qcGdcIixcclxuICB9LFxyXG5cclxuICB7XHJcbiAgICBuYW1lOiBcIkxhdGVtYXJcIixcclxuICAgIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9zb2Z0d2FyZS1lbmdpbmVlci9hcm91bmQtcHJvamVjdC9sYXRlbWFyLmpwZ1wiLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgbmFtZTogXCJCYWxkIE1vdW50YWluc1wiLFxyXG4gICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L2JhbGQtbW91bnRhaW5zLmpwZ1wiLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgbmFtZTogXCJMYWtlIExvdWlzZVwiLFxyXG4gICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L2xha2UtbG91aXNlLmpwZ1wiLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgbmFtZTogXCJZb3NlbWl0ZSBWYWxsZXlcIixcclxuICAgIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9zb2Z0d2FyZS1lbmdpbmVlci9hcm91bmQtcHJvamVjdC95b3NlbWl0ZS5qcGdcIixcclxuICB9LFxyXG5dO1xyXG5cclxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IHtcclxuICBmb3JtU2VsZWN0b3I6IFwiLm1vZGFsX19mb3JtXCIsXHJcbiAgaW5wdXRTZWxlY3RvcjogXCIubW9kYWxfX2lucHV0XCIsXHJcbiAgc3VibWl0QnV0dG9uU2VsZWN0b3I6IFwiLm1vZGFsX19idXR0b25cIixcclxuICBpbmFjdGl2ZUJ1dHRvbkNsYXNzOiBcIm1vZGFsX19idXR0b25fZGlzYWJsZWRcIixcclxuICBpbnB1dEVycm9yQ2xhc3M6IFwibW9kYWxfX2lucHV0X3R5cGVfZXJyb3JcIixcclxuICBlcnJvckNsYXNzOiBcIm1vZGFsX19lcnJvcl92aXNpYmxlXCIsXHJcbn07XHJcbiIsImltcG9ydCBDYXJkIGZyb20gXCIuLi9jb21wb25lbnRzL0NhcmQuanNcIjtcclxuaW1wb3J0IEZvcm1WYWxpZGF0b3IgZnJvbSBcIi4uL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qc1wiO1xyXG5pbXBvcnQgU2VjdGlvbiBmcm9tIFwiLi4vY29tcG9uZW50cy9zZWN0aW9uLmpzXCI7XHJcbmltcG9ydCBQb3B1cFdpdGhGb3JtIGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanNcIjtcclxuaW1wb3J0IFBvcHVwV2l0aEltYWdlIGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzXCI7XHJcbmltcG9ydCBQb3B1cFdpdGhDb25maXJtIGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwV2l0aENvbmZpcm0uanNcIjtcclxuaW1wb3J0IFVzZXJJbmZvIGZyb20gXCIuLi9jb21wb25lbnRzL1VzZXJJbmZvLmpzXCI7XHJcbmltcG9ydCB7IGluaXRpYWxDYXJkcywgY29uZmlnIH0gZnJvbSBcIi4uL3V0aWxzL0NvbnN0YW50cy5qc1wiO1xyXG5pbXBvcnQgXCIuLi9wYWdlcy9pbmRleC5jc3NcIjtcclxuaW1wb3J0IEFwaSBmcm9tIFwiLi4vY29tcG9uZW50cy9BcGkuanNcIjtcclxuXHJcbi8vc3BlY2lmaWNlIG1vZGFsIHNlbGVjdG9yXHJcbmNvbnN0IHByb2ZpbGVNb2RhbEVkaXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI21vZGFsLWVkaXRcIik7XHJcblxyXG4vLyBvcGVuIGJ1dHRvbnNcclxuY29uc3QgYWRkTmV3Q2FyZEJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9fYWRkLWJ1dHRvblwiKTtcclxuY29uc3QgYXZhdGFyQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19hdmF0YXItYnV0dG9uXCIpO1xyXG5jb25zdCBlZGl0UHJvZmlsZUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9fZWRpdC1idXR0b25cIik7XHJcblxyXG4vL3RleHQgaW4gdGhlIGVkaXQgZm9ybVxyXG5jb25zdCBpbnB1dE5hbWUgPSBwcm9maWxlTW9kYWxFZGl0LnF1ZXJ5U2VsZWN0b3IoXCIjbmFtZVwiKTtcclxuY29uc3QgaW5wdXRTdWJ0aXRsZSA9IHByb2ZpbGVNb2RhbEVkaXQucXVlcnlTZWxlY3RvcihcIiNzdWJ0aXRsZVwiKTtcclxuXHJcbmNvbnN0IGFwaSA9IG5ldyBBcGkoXCJodHRwczovL2Fyb3VuZC1hcGkuZW4udHJpcGxldGVuLXNlcnZpY2VzLmNvbS92MVwiLCB7XHJcbiAgYXV0aG9yaXphdGlvbjogXCI2ZTZjYTk1NS1jMmRmLTRkNzAtYTM1ZS1hZjkwMjU1OTlmYThcIixcclxuICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcclxufSk7XHJcblxyXG4vLyAtLS0tLS0tLS0tIFVzZXIgSW5mbyAtLS0tLS0tLS0tXHJcbmNvbnN0IHVzZXJJbmZvID0gbmV3IFVzZXJJbmZvKHtcclxuICBuYW1lU2VsZWN0b3I6IFwiLnByb2ZpbGVfX3RpdGxlXCIsXHJcbiAgam9iU2VsZWN0b3I6IFwiLnByb2ZpbGVfX3N1YnRpdGxlXCIsXHJcbiAgYXZhdGFyU2VsZWN0b3I6IFwiLnByb2ZpbGVfX2F2YXRhclwiLFxyXG59KTtcclxuXHJcbi8vIC0tLS0tLS0tLS0gUG9wdXBzIC0tLS0tLS0tLS1cclxuLy8gUHJvZmlsZSBFZGl0IFBvcHVwXHJcbmNvbnN0IHByb2ZpbGVFZGl0UG9wdXAgPSBuZXcgUG9wdXBXaXRoRm9ybShcIiNtb2RhbC1lZGl0XCIsIGhhbmRsZUZvcm1TdWJtaXRFZGl0KTtcclxucHJvZmlsZUVkaXRQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuLy8gUHJvZmlsZSBBZGQgUG9wdXBcclxuY29uc3QgYWRkQ2FyZFBvcHVwID0gbmV3IFBvcHVwV2l0aEZvcm0oXCIjbW9kYWwtYWRkXCIsIGhhbmRsZUZvcm1TdWJtaXRBZGQpO1xyXG5hZGRDYXJkUG9wdXAuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbi8vIEltYWdlIFByZXZpZXcgUG9wdXBcclxuY29uc3QgaW1hZ2VQb3B1cCA9IG5ldyBQb3B1cFdpdGhJbWFnZShcIiNtb2RhbC1pbWFnZVwiKTtcclxuaW1hZ2VQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuLy8gZGVsZXRlIGNhcmQgUG9wdXBcclxuY29uc3QgZGVsZXRlSW1hZ2VQb3B1cCA9IG5ldyBQb3B1cFdpdGhDb25maXJtKFwiI21vZGFsLXRyYXNoXCIpO1xyXG5kZWxldGVJbWFnZVBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG5jb25zdCBhdmF0YXJDaGFuZ2VQb3B1cCA9IG5ldyBQb3B1cFdpdGhGb3JtKFxyXG4gIFwiI21vZGFsLXVwZGF0ZVwiLFxyXG4gIGhhbmRsZUZvcm1TdWJtaXRBdmF0YXJcclxuKTtcclxuYXZhdGFyQ2hhbmdlUG9wdXAuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbi8vLS0tLS0tLS0tLS0tLS0tLS0tRXZlbnRMaXN0ZW5lcnMgb2YgZm9ybXMtLS0tLS0tLS0tLS0tLS0tLy9cclxuXHJcbi8vIE9wZW4gUHJvZmlsZSBFZGl0IFBvcHVwIGFuZCBzZXQgdGhlIGRhdGFcclxuZWRpdFByb2ZpbGVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICBjb25zdCB1c2VyRGF0YSA9IHVzZXJJbmZvLmdldFVzZXJJbmZvKCk7XHJcblxyXG4gIGlucHV0TmFtZS52YWx1ZSA9IHVzZXJEYXRhLm5hbWU7XHJcbiAgaW5wdXRTdWJ0aXRsZS52YWx1ZSA9IHVzZXJEYXRhLmpvYjtcclxuXHJcbiAgcHJvZmlsZUVkaXRQb3B1cC5vcGVuKCk7XHJcbn0pO1xyXG5cclxuLy8gT3BlbiBQcm9maWxlIEFkZCBQb3B1cFxyXG5hZGROZXdDYXJkQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgYWRkQ2FyZFBvcHVwLm9wZW4oKTtcclxufSk7XHJcblxyXG4vLyBPcGVuIFByb2ZpbGUgYXZhdGFyIGVkaXQgUG9wdXBcclxuYXZhdGFyQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgYXZhdGFyQ2hhbmdlUG9wdXAub3BlbigpO1xyXG59KTtcclxuXHJcbi8vLS0tLS0tLS0tLS0tLS0tLWZ1bmN0aW9ucy0tLS0tLS0tLS0tLS0tLS0tLS8vXHJcblxyXG4vL0VESVQgc3VibWl0IGZ1bmN0aW9uXHJcbmZ1bmN0aW9uIGhhbmRsZUZvcm1TdWJtaXRFZGl0KGRhdGEpIHtcclxuICBwcm9maWxlRWRpdFBvcHVwLnJlbmRlckxvYWRpbmcodHJ1ZSk7XHJcbiAgYXBpXHJcbiAgICAuZWRpdFByb2ZpbGUoZGF0YSlcclxuICAgIC50aGVuKChkYXRhKSA9PiB7XHJcbiAgICAgIHVzZXJJbmZvLnNldFVzZXJJbmZvKHtcclxuICAgICAgICBuYW1lOiBkYXRhLm5hbWUsXHJcbiAgICAgICAgam9iOiBkYXRhLmFib3V0LFxyXG4gICAgICB9KTtcclxuICAgICAgdXNlckluZm8uc2V0VXNlckF2YXRhcihkYXRhLmF2YXRhcik7XHJcbiAgICAgIHByb2ZpbGVFZGl0UG9wdXAuY2xvc2UoKTtcclxuICAgIH0pXHJcbiAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgdXBkYXRpbmcgcHJvZmlsZTogXCIsIGVycik7XHJcbiAgICB9KVxyXG4gICAgLmZpbmFsbHkoKCkgPT4ge1xyXG4gICAgICBwcm9maWxlRWRpdFBvcHVwLnJlbmRlckxvYWRpbmcoZmFsc2UpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbi8vQUREIHN1Ym1pdCBmdW5jdGlvblxyXG5mdW5jdGlvbiBoYW5kbGVGb3JtU3VibWl0QWRkKGlucHV0RGF0YSkge1xyXG4gIGFkZENhcmRQb3B1cC5yZW5kZXJMb2FkaW5nKHRydWUpO1xyXG4gIGFwaVxyXG4gICAgLmNyZWF0ZUNhcmRBZGQoaW5wdXREYXRhKSAvLyBTZW5kIHRoZSBkYXRhIHRvIHRoZSBzZXJ2ZXJcclxuICAgIC50aGVuKChkYXRhKSA9PiB7XHJcbiAgICAgIHJlbmRlckNhcmQoZGF0YSk7IC8vIFJlbmRlciB1c2luZyB0aGUgc2VydmVyJ3MgcmVzcG9uc2VcclxuICAgICAgYWRkQ2FyZFBvcHVwLmNsb3NlKCk7XHJcbiAgICAgIGFkZENhcmRQb3B1cC5mb3JtUmVzZXQoKTtcclxuICAgIH0pXHJcbiAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgY3JlYXRpbmcgY2FyZDpcIiwgZXJyKTtcclxuICAgIH0pXHJcbiAgICAuZmluYWxseSgoKSA9PiB7XHJcbiAgICAgIGFkZENhcmRQb3B1cC5yZW5kZXJMb2FkaW5nKGZhbHNlKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG4vL0FWQVRBUiBzdWJtaXQgZnVuY3Rpb25cclxuZnVuY3Rpb24gaGFuZGxlRm9ybVN1Ym1pdEF2YXRhcihpbnB1dERhdGEpIHtcclxuICBhdmF0YXJDaGFuZ2VQb3B1cC5yZW5kZXJMb2FkaW5nKHRydWUpO1xyXG4gIGFwaVxyXG4gICAgLmVkaXRQcm9maWxlQXZhdGFyKGlucHV0RGF0YSkgLy8gU2VuZCB0aGUgZGF0YSB0byB0aGUgc2VydmVyXHJcbiAgICAudGhlbigoZGF0YSkgPT4ge1xyXG4gICAgICB1c2VySW5mby5zZXRVc2VyQXZhdGFyKGRhdGEuYXZhdGFyKTtcclxuICAgICAgYXZhdGFyQ2hhbmdlUG9wdXAuY2xvc2UoKTtcclxuICAgICAgYXZhdGFyQ2hhbmdlUG9wdXAuZm9ybVJlc2V0KCk7XHJcbiAgICB9KVxyXG4gICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGNyZWF0aW5nIGNhcmQ6XCIsIGVycik7XHJcbiAgICB9KVxyXG4gICAgLmZpbmFsbHkoKCkgPT4ge1xyXG4gICAgICBhdmF0YXJDaGFuZ2VQb3B1cC5yZW5kZXJMb2FkaW5nKGZhbHNlKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG4vL0xpa2VzIGZ1bmN0aW9uXHJcbmZ1bmN0aW9uIGhhbmRsZUxpa2VDbGljayh0aGlzQ2FyZCkge1xyXG4gIGlmICghdGhpc0NhcmQuaXNMaWtlZCkge1xyXG4gICAgYXBpXHJcbiAgICAgIC5saWtlQ2FyZCh0aGlzQ2FyZC5faWQpXHJcbiAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICB0aGlzQ2FyZC50b2dnbGVMaWtlKCk7XHJcbiAgICAgICAgdGhpc0NhcmQuaXNMaWtlZCA9ICF0aGlzQ2FyZC5pc0xpa2VkO1xyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBjcmVhdGluZyBjYXJkOlwiLCBlcnIpO1xyXG4gICAgICB9KTtcclxuICB9IGVsc2Uge1xyXG4gICAgYXBpXHJcbiAgICAgIC5kaXNsaWtlQ2FyZCh0aGlzQ2FyZC5faWQpXHJcbiAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICB0aGlzQ2FyZC50b2dnbGVMaWtlKCk7XHJcbiAgICAgICAgdGhpc0NhcmQuaXNMaWtlZCA9ICF0aGlzQ2FyZC5pc0xpa2VkO1xyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBjcmVhdGluZyBjYXJkOlwiLCBlcnIpO1xyXG4gICAgICB9KTtcclxuICB9XHJcbn1cclxuXHJcbi8vZGVsZXRlIGNhcmQgZnVuY3Rpb25cclxuZnVuY3Rpb24gaGFuZGxlRGVsZXRlQ2xpY2soY2FyZCkge1xyXG4gIGRlbGV0ZUltYWdlUG9wdXAub3BlbigpO1xyXG4gIC8vIFNldCB0aGUgYWN0aW9uIGZvciB0aGUgZGVsZXRlIGNvbmZpcm1hdGlvbiBwb3B1cFxyXG4gIGRlbGV0ZUltYWdlUG9wdXAuc2V0U3VibWl0QWN0aW9uKCgpID0+IHtcclxuICAgIGRlbGV0ZUltYWdlUG9wdXAucmVuZGVyTG9hZGluZyh0cnVlKTtcclxuICAgIGFwaVxyXG4gICAgICAuZGVsZXRlQ2FyZChjYXJkLl9pZClcclxuICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgIGNhcmQucmVtb3ZlQ2FyZCgpO1xyXG4gICAgICAgIGRlbGV0ZUltYWdlUG9wdXAuY2xvc2UoKTtcclxuICAgICAgfSlcclxuICAgICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZGVsZXRpbmcgY2FyZDpcIiwgZXJyKTtcclxuICAgICAgfSlcclxuICAgICAgLmZpbmFsbHkoKCkgPT4ge1xyXG4gICAgICAgIGRlbGV0ZUltYWdlUG9wdXAucmVuZGVyTG9hZGluZyhmYWxzZSk7IC8vIFJlc2V0IHRoZSBidXR0b24gdGV4dFxyXG4gICAgICB9KTtcclxuICB9KTtcclxufVxyXG5cclxuLy8gQ0FSRFNcclxubGV0IGNhcmRTZWN0aW9uO1xyXG5cclxuYXBpXHJcbiAgLmdldEFwcEluZm8oKVxyXG4gIC50aGVuKChbY2FyZHMsIHVzZXJEYXRhXSkgPT4ge1xyXG4gICAgY2FyZFNlY3Rpb24gPSBuZXcgU2VjdGlvbihcclxuICAgICAge1xyXG4gICAgICAgIGl0ZW1zOiBjYXJkcy5yZXZlcnNlKCksIC8vIFBhc3MgZmV0Y2hlZCBjYXJkcyB0byBTZWN0aW9uXHJcbiAgICAgICAgcmVuZGVyZXI6IHJlbmRlckNhcmQsXHJcbiAgICAgIH0sXHJcbiAgICAgIFwiLmNhcmRzX19saXN0XCJcclxuICAgICk7XHJcblxyXG4gICAgY2FyZFNlY3Rpb24ucmVuZGVySXRlbXMoKTtcclxuXHJcbiAgICAvL2hlcmUgd2UgZGlzcGxheSB0aGF0IHVzZXJpbmZvIG9uIHRoZSBkb20gKHZpc3VhbGx5KVxyXG4gICAgdXNlckluZm8uc2V0VXNlckluZm8oe1xyXG4gICAgICBuYW1lOiB1c2VyRGF0YS5uYW1lLFxyXG4gICAgICBqb2I6IHVzZXJEYXRhLmFib3V0LFxyXG4gICAgfSk7XHJcbiAgICB1c2VySW5mby5zZXRVc2VyQXZhdGFyKHVzZXJEYXRhLmF2YXRhcik7XHJcbiAgfSlcclxuICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGxvYWRpbmcgYXBwIGluZm86XCIsIGVycik7XHJcbiAgfSk7XHJcblxyXG5mdW5jdGlvbiByZW5kZXJDYXJkKGRhdGEpIHtcclxuICBjb25zdCBjYXJkRWxlbWVudCA9IGNyZWF0ZUNhcmQoZGF0YSk7XHJcbiAgY2FyZFNlY3Rpb24uYWRkSXRlbShjYXJkRWxlbWVudCk7XHJcbn1cclxuXHJcbi8vIENyZWF0ZSBDYXJkIEZ1bmN0aW9uXHJcbmZ1bmN0aW9uIGNyZWF0ZUNhcmQoY2FyZERhdGEpIHtcclxuICBjb25zdCBjYXJkID0gbmV3IENhcmQoXHJcbiAgICBjYXJkRGF0YSxcclxuICAgIFwiI2NhcmQtdGVtcGxhdGVcIixcclxuICAgIChuYW1lLCBsaW5rKSA9PiB7XHJcbiAgICAgIGltYWdlUG9wdXAub3Blbih7IG5hbWUsIGxpbmsgfSk7XHJcbiAgICB9LFxyXG4gICAgaGFuZGxlRGVsZXRlQ2xpY2ssIC8vIEhhbmRsZSBkZWxldGUgY2FyZFxyXG4gICAgaGFuZGxlTGlrZUNsaWNrXHJcbiAgKTtcclxuXHJcbiAgcmV0dXJuIGNhcmQuZ2VuZXJhdGVDYXJkKCk7XHJcbn1cclxuXHJcbi8vLS0tLS0tLS0tLS0tLS0tLSBoYW5kbGUgVmFsaWRhdG9ycyBpbiBmb3JtcyAtLS0tLS0tLS0tLS0tLS0tLy9cclxuY29uc3QgZm9ybUVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5tb2RhbF9fZm9ybVwiKTtcclxuY29uc3QgZm9ybVZhbGlkYXRvcnMgPSB7fTtcclxuXHJcbmZvcm1FbGVtZW50cy5mb3JFYWNoKChmb3JtRWwpID0+IHtcclxuICBjb25zdCBmb3JtVmFsaWRhdG9yID0gbmV3IEZvcm1WYWxpZGF0b3IoY29uZmlnLCBmb3JtRWwpO1xyXG4gIGNvbnN0IGZvcm1OYW1lID0gZm9ybUVsLmdldEF0dHJpYnV0ZShcIm5hbWVcIik7XHJcbiAgZm9ybVZhbGlkYXRvcnNbZm9ybU5hbWVdID0gZm9ybVZhbGlkYXRvcjtcclxuICBmb3JtVmFsaWRhdG9yLmVuYWJsZVZhbGlkYXRpb24oKTtcclxufSk7XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwaSB7XHJcbiAgY29uc3RydWN0b3IoYmFzZVVybCwgaGVhZGVycykge1xyXG4gICAgdGhpcy5fYmFzZVVybCA9IGJhc2VVcmw7XHJcbiAgICB0aGlzLl9oZWFkZXJzID0gaGVhZGVycztcclxuICB9XHJcblxyXG4gIF9jaGVja1Jlc3BvbnNlKHJlcykge1xyXG4gICAgaWYgKHJlcy5vaykge1xyXG4gICAgICByZXR1cm4gcmVzLmpzb24oKTtcclxuICAgIH1cclxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChgRXJyb3I6ICR7cmVzLnN0YXR1c31gKTtcclxuICB9XHJcblxyXG4gIF9yZXF1ZXN0KGVuZHBvaW50LCBvcHRpb25zID0ge30pIHtcclxuICAgIGNvbnN0IGZpbmFsT3B0aW9ucyA9IHtcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgICAgLi4ub3B0aW9ucyxcclxuICAgIH07XHJcbiAgICBjb25zdCB1cmwgPSBgJHt0aGlzLl9iYXNlVXJsfSR7ZW5kcG9pbnR9YDtcclxuICAgIHJldHVybiBmZXRjaCh1cmwsIGZpbmFsT3B0aW9ucykudGhlbih0aGlzLl9jaGVja1Jlc3BvbnNlKTtcclxuICB9XHJcblxyXG4gIGdldFVzZXJJbmZvKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoXCIvdXNlcnMvbWVcIik7XHJcbiAgfVxyXG5cclxuICBlZGl0UHJvZmlsZShkYXRhKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fcmVxdWVzdChcIi91c2Vycy9tZVwiLCB7XHJcbiAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgbmFtZTogZGF0YS5uYW1lLFxyXG4gICAgICAgIGFib3V0OiBkYXRhLnN1YnRpdGxlLFxyXG4gICAgICB9KSxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZ2V0SW5pdGlhbENhcmRzKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoXCIvY2FyZHNcIik7XHJcbiAgfVxyXG5cclxuICBjcmVhdGVDYXJkQWRkKGRhdGEpIHtcclxuICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KFwiL2NhcmRzXCIsIHtcclxuICAgICAgbWV0aG9kOiBcIlBPU1RcIixcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgIG5hbWU6IGRhdGEudGl0bGUsXHJcbiAgICAgICAgbGluazogZGF0YS51cmwsXHJcbiAgICAgIH0pLFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBkZWxldGVDYXJkKGNhcmRJZCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoYC9jYXJkcy8ke2NhcmRJZH1gLCB7XHJcbiAgICAgIG1ldGhvZDogXCJERUxFVEVcIixcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgbGlrZUNhcmQoY2FyZElkKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fcmVxdWVzdChgL2NhcmRzLyR7Y2FyZElkfS9saWtlc2AsIHtcclxuICAgICAgbWV0aG9kOiBcIlBVVFwiLFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBkaXNsaWtlQ2FyZChjYXJkSWQpIHtcclxuICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KGAvY2FyZHMvJHtjYXJkSWR9L2xpa2VzYCwge1xyXG4gICAgICBtZXRob2Q6IFwiREVMRVRFXCIsXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGVkaXRQcm9maWxlQXZhdGFyKGRhdGEpIHtcclxuICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KGAvdXNlcnMvbWUvYXZhdGFyYCwge1xyXG4gICAgICBtZXRob2Q6IFwiUEFUQ0hcIixcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgIGF2YXRhcjogZGF0YS51cmwsXHJcbiAgICAgIH0pLFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBnZXRBcHBJbmZvKCkge1xyXG4gICAgcmV0dXJuIFByb21pc2UuYWxsKFt0aGlzLmdldEluaXRpYWxDYXJkcygpLCB0aGlzLmdldFVzZXJJbmZvKCldKTtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgVXNlckluZm8ge1xyXG4gIGNvbnN0cnVjdG9yKHsgbmFtZVNlbGVjdG9yLCBqb2JTZWxlY3RvciwgYXZhdGFyU2VsZWN0b3IgfSkge1xyXG4gICAgdGhpcy5fbmFtZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG5hbWVTZWxlY3Rvcik7XHJcbiAgICB0aGlzLl9qb2JFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihqb2JTZWxlY3Rvcik7XHJcbiAgICB0aGlzLl9hdmF0YXJFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihhdmF0YXJTZWxlY3Rvcik7XHJcbiAgfVxyXG4gIGdldFVzZXJJbmZvKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbmFtZTogdGhpcy5fbmFtZUVsZW1lbnQudGV4dENvbnRlbnQsXHJcbiAgICAgIGpvYjogdGhpcy5fam9iRWxlbWVudC50ZXh0Q29udGVudCxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBzZXRVc2VySW5mbyh7IG5hbWUsIGpvYiB9KSB7XHJcbiAgICB0aGlzLl9uYW1lRWxlbWVudC50ZXh0Q29udGVudCA9IG5hbWU7IC8vIFVwZGF0ZXMgdGhlIG5hbWUgb24gdGhlIHBhZ2VcclxuICAgIHRoaXMuX2pvYkVsZW1lbnQudGV4dENvbnRlbnQgPSBqb2I7IC8vIFVwZGF0ZXMgdGhlIGpvYiBvbiB0aGUgcGFnZVxyXG4gIH1cclxuXHJcbiAgc2V0VXNlckF2YXRhcihhdmF0YXIpIHtcclxuICAgIHRoaXMuX2F2YXRhckVsZW1lbnQuc3JjID0gYXZhdGFyO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4vUG9wdXAuanNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aEltYWdlIGV4dGVuZHMgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IpIHtcclxuICAgIHN1cGVyKHsgcG9wdXBTZWxlY3RvciB9KTtcclxuICAgIHRoaXMuX2ltYWdlRWxlbWVudCA9IHRoaXMuX3BvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICBcIi5tb2RhbF9faW1hZ2UtcHJldmlld1wiXHJcbiAgICApO1xyXG5cclxuICAgIHRoaXMuX2NhcHRpb25FbGVtZW50ID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIFwiLm1vZGFsX190aXRsZS1wcmV2aWV3XCJcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBvcGVuKGNhcmREYXRhKSB7XHJcbiAgICB0aGlzLl9pbWFnZUVsZW1lbnQuc3JjID0gY2FyZERhdGEubGluaztcclxuICAgIHRoaXMuX2ltYWdlRWxlbWVudC5hbHQgPSBjYXJkRGF0YS5uYW1lO1xyXG4gICAgdGhpcy5fY2FwdGlvbkVsZW1lbnQudGV4dENvbnRlbnQgPSBjYXJkRGF0YS5uYW1lO1xyXG4gICAgc3VwZXIub3BlbigpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4vUG9wdXAuanNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aENvbmZpcm0gZXh0ZW5kcyBQb3B1cCB7XHJcbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3Rvcikge1xyXG4gICAgc3VwZXIoeyBwb3B1cFNlbGVjdG9yIH0pO1xyXG4gICAgdGhpcy5fcG9wdXBGb3JtID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2Zvcm1cIik7XHJcbiAgICB0aGlzLl9zdWJtaXRCdXR0b24gPSB0aGlzLl9wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIiNzYXZlLWJ0blwiKTtcclxuICAgIHRoaXMuX2RlZmF1bHRCdXR0b25UZXh0ID0gdGhpcy5fc3VibWl0QnV0dG9uLnRleHRDb250ZW50O1xyXG4gIH1cclxuICBzZXRTdWJtaXRBY3Rpb24oYWN0aW9uKSB7XHJcbiAgICB0aGlzLl9oYW5kbGVTdWJtaXRDYWxsYmFjayA9IGFjdGlvbjtcclxuICB9XHJcblxyXG4gIHJlbmRlckxvYWRpbmcoaXNMb2FkaW5nLCBsb2FkaW5nVGV4dCA9IFwiRGVsZXRpbmcuLi5cIikge1xyXG4gICAgaWYgKGlzTG9hZGluZykge1xyXG4gICAgICB0aGlzLl9zdWJtaXRCdXR0b24udGV4dENvbnRlbnQgPSBsb2FkaW5nVGV4dDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi50ZXh0Q29udGVudCA9IHRoaXMuX2RlZmF1bHRCdXR0b25UZXh0O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICB0aGlzLl9wb3B1cEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZXZ0KSA9PiB7XHJcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICB0aGlzLl9oYW5kbGVTdWJtaXRDYWxsYmFjaygpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbIkNhcmQiLCJjb25zdHJ1Y3RvciIsImRhdGEiLCJjYXJkU2VsZWN0b3IiLCJoYW5kbGVJbWFnZUNsaWNrIiwiaGFuZGxlRGVsZXRlQ2xpY2siLCJoYW5kbGVMaWtlQ2xpY2siLCJ0aGlzIiwiX25hbWUiLCJuYW1lIiwiX2xpbmsiLCJsaW5rIiwiX2lkIiwiX2NhcmRTZWxlY3RvciIsIl9oYW5kZUltYWdlQ2xpY2siLCJfaGFuZGxlRGVsZXRlQ2xpY2siLCJfaGFuZGxlTGlrZUNsaWNrIiwiaXNMaWtlZCIsIl9zZXRFdmVudExpc3RlbmVycyIsIl9saWtlQnV0dG9uIiwiYWRkRXZlbnRMaXN0ZW5lciIsIl9jYXJkSW1hZ2VFbGVtZW50IiwiX2RlbGV0ZUJ1dHRvbiIsImNoZWNrTGlrZVN0YXRlIiwiY2xhc3NMaXN0IiwiYWRkIiwicmVtb3ZlIiwidG9nZ2xlTGlrZSIsInRvZ2dsZSIsInJlbW92ZUNhcmQiLCJfY2FyZEVsZW1lbnQiLCJfZ2V0VGVtcGxhdGUiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJjb250ZW50IiwiY2xvbmVOb2RlIiwiZ2VuZXJhdGVDYXJkIiwiY2FyZFRpdGxlIiwic3JjIiwiYWx0IiwidGV4dENvbnRlbnQiLCJGb3JtVmFsaWRhdG9yIiwiY29uZmlnIiwiZm9ybUVsIiwiX2lucHV0U2VsZWN0b3IiLCJpbnB1dFNlbGVjdG9yIiwiX3N1Ym1pdEJ1dHRvblNlbGVjdG9yIiwic3VibWl0QnV0dG9uU2VsZWN0b3IiLCJfaW5hY3RpdmVCdXR0b25DbGFzcyIsImluYWN0aXZlQnV0dG9uQ2xhc3MiLCJfaW5wdXRFcnJvckNsYXNzIiwiaW5wdXRFcnJvckNsYXNzIiwiX2Vycm9yQ2xhc3MiLCJlcnJvckNsYXNzIiwiX2Zvcm1FbCIsIl9zdWJtaXRCdXR0b24iLCJfaW5wdXRFbGVtZW50cyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJzaG93RXJyb3JNZXNzYWdlIiwiaW5wdXRFbCIsImVycm9yRWwiLCJpZCIsInZhbGlkYXRpb25NZXNzYWdlIiwiaGlkZUVycm9yTWVzc2FnZSIsImNoZWNrSW5wdXRWYWxpZGl0eSIsInZhbGlkaXR5IiwidmFsaWQiLCJ0b2dnbGVCdXR0b25TdGF0ZSIsImV2ZXJ5IiwiZGlzYWJsZWQiLCJkaXNhYmxlU3VibWl0QnV0dG9uIiwic2V0RXZlbnRMaXN0ZW5lcnMiLCJmb3JFYWNoIiwiZW5hYmxlVmFsaWRhdGlvbiIsImUiLCJwcmV2ZW50RGVmYXVsdCIsImNvbnNvbGUiLCJsb2ciLCJTZWN0aW9uIiwiX3JlZiIsImNvbnRhaW5lclNlbGVjdG9yIiwiaXRlbXMiLCJyZW5kZXJlciIsIl9pdGVtcyIsIl9yZW5kZXJlciIsIl9jb250YWluZXIiLCJyZW5kZXJJdGVtcyIsIml0ZW0iLCJhZGRJdGVtIiwiZWxlbWVudCIsInByZXBlbmQiLCJQb3B1cCIsInBvcHVwU2VsZWN0b3IiLCJfcG9wdXBFbGVtZW50IiwiX2hhbmRsZUVzY0Nsb3NlIiwiYmluZCIsIm9wZW4iLCJjbG9zZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJldnQiLCJrZXkiLCJldmVudCIsInRhcmdldCIsIlBvcHVwV2l0aEZvcm0iLCJoYW5kbGVGb3JtU3VibWl0Iiwic3VwZXIiLCJfaGFuZGxlRm9ybVN1Ym1pdCIsIl9mb3JtUG9wdXAiLCJfaW5wdXRMaXN0IiwiX2RlZmF1bHRCdXR0b25UZXh0IiwiX2dldElucHV0VmFsdWVzIiwiX2Zvcm1WYWx1ZXMiLCJpbnB1dCIsInZhbHVlIiwicmVuZGVyTG9hZGluZyIsImlzTG9hZGluZyIsImxvYWRpbmdUZXh0IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwic2V0SW5wdXRWYWx1ZXMiLCJmb3JtUmVzZXQiLCJyZXNldCIsImdldEZvcm0iLCJmb3JtU2VsZWN0b3IiLCJwcm9maWxlTW9kYWxFZGl0IiwiYWRkTmV3Q2FyZEJ0biIsImF2YXRhckJ0biIsImVkaXRQcm9maWxlQnV0dG9uIiwiaW5wdXROYW1lIiwiaW5wdXRTdWJ0aXRsZSIsImFwaSIsImJhc2VVcmwiLCJoZWFkZXJzIiwiX2Jhc2VVcmwiLCJfaGVhZGVycyIsIl9jaGVja1Jlc3BvbnNlIiwicmVzIiwib2siLCJqc29uIiwiUHJvbWlzZSIsInJlamVjdCIsInN0YXR1cyIsIl9yZXF1ZXN0IiwiZW5kcG9pbnQiLCJvcHRpb25zIiwiZmluYWxPcHRpb25zIiwidXJsIiwiZmV0Y2giLCJ0aGVuIiwiZ2V0VXNlckluZm8iLCJlZGl0UHJvZmlsZSIsIm1ldGhvZCIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiYWJvdXQiLCJzdWJ0aXRsZSIsImdldEluaXRpYWxDYXJkcyIsImNyZWF0ZUNhcmRBZGQiLCJ0aXRsZSIsImRlbGV0ZUNhcmQiLCJjYXJkSWQiLCJsaWtlQ2FyZCIsImRpc2xpa2VDYXJkIiwiZWRpdFByb2ZpbGVBdmF0YXIiLCJhdmF0YXIiLCJnZXRBcHBJbmZvIiwiYWxsIiwiYXV0aG9yaXphdGlvbiIsInVzZXJJbmZvIiwibmFtZVNlbGVjdG9yIiwiam9iU2VsZWN0b3IiLCJhdmF0YXJTZWxlY3RvciIsIl9uYW1lRWxlbWVudCIsIl9qb2JFbGVtZW50IiwiX2F2YXRhckVsZW1lbnQiLCJqb2IiLCJzZXRVc2VySW5mbyIsIl9yZWYyIiwic2V0VXNlckF2YXRhciIsInByb2ZpbGVFZGl0UG9wdXAiLCJjYXRjaCIsImVyciIsImVycm9yIiwiZmluYWxseSIsImFkZENhcmRQb3B1cCIsImlucHV0RGF0YSIsInJlbmRlckNhcmQiLCJpbWFnZVBvcHVwIiwiX2ltYWdlRWxlbWVudCIsIl9jYXB0aW9uRWxlbWVudCIsImNhcmREYXRhIiwiZGVsZXRlSW1hZ2VQb3B1cCIsIl9wb3B1cEZvcm0iLCJzZXRTdWJtaXRBY3Rpb24iLCJhY3Rpb24iLCJfaGFuZGxlU3VibWl0Q2FsbGJhY2siLCJhdmF0YXJDaGFuZ2VQb3B1cCIsInRoaXNDYXJkIiwiY2FyZCIsImNhcmRTZWN0aW9uIiwiY2FyZEVsZW1lbnQiLCJ1c2VyRGF0YSIsImNhcmRzIiwicmV2ZXJzZSIsImZvcm1FbGVtZW50cyIsImZvcm1WYWxpZGF0b3JzIiwiZm9ybVZhbGlkYXRvciIsImZvcm1OYW1lIiwiZ2V0QXR0cmlidXRlIl0sInNvdXJjZVJvb3QiOiIifQ==